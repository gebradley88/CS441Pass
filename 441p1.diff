diff -ur FinalProjectStageA/calc3.l FinalProjectStageA-fixed/calc3.l
--- FinalProjectStageA/calc3.l	2012-11-19 10:47:48.000000000 -0500
+++ FinalProjectStageA-fixed/calc3.l	2014-11-25 12:23:31.000000000 -0500
@@ -28,7 +28,7 @@
                 return INTEGER;
             }
 			
-[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?	{
+[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?	{
 				yylval.fValue = atof(yytext);
 				return FLOAT;
 			}
@@ -51,6 +51,7 @@
 "print"         return PRINT;
 "int"			return T_INT; /* rgc: reserved words for int and float/double types */
 "double"		return T_DOUBLE;
+"float"		return T_DOUBLE;
 
 [a-zA-Z_][a-zA-Z0-9_]* {  /* changed JWJ */
                 yylval.sName = strdup(yytext); /* changed JWJ */
diff -ur FinalProjectStageA/calc3.y FinalProjectStageA-fixed/calc3.y
--- FinalProjectStageA/calc3.y	2014-11-20 09:20:03.000000000 -0500
+++ FinalProjectStageA-fixed/calc3.y	2014-11-25 12:11:45.000000000 -0500
@@ -60,7 +60,7 @@
         | VARIABLE '=' expr ';'          { $$ = opr('=', 2, id($1), $3); } 
         | typedecl_expr '=' expr ';'     { $$ = opr('=', 2, $1, $3); } /* rgc: allow for inline declarations (i.e. int n=5) but only on LHS */
         | WHILE '(' expr ')' stmt        { $$ = opr(WHILE, 2, $3, $5); }
-        | DO stmt WHILE '(' expr ')'     {  } /*JWJ: TODO implement*/
+        | DO stmt WHILE '(' expr ')'     { $$ = opr(DO, 2, $5, $2); } /*JWJ: TODO implement*/
         | FOR '(' stmt stmt stmt ')'  stmt    { $$ = opr(FOR, 4, $3, $4, $5, $7); } /* JWJ: TODO: Implement for loops */
         | IF '(' expr ')' stmt %prec IFX { $$ = opr(IF, 2, $3, $5); }
         | IF '(' expr ')' stmt ELSE stmt { $$ = opr(IF, 3, $3, $5, $7); }
diff -ur FinalProjectStageA/calc3a.c FinalProjectStageA-fixed/calc3a.c
--- FinalProjectStageA/calc3a.c	2012-11-20 12:14:57.000000000 -0500
+++ FinalProjectStageA-fixed/calc3a.c	2014-11-25 12:12:53.000000000 -0500
@@ -54,7 +54,7 @@
 				case WHILE:	
 					while(ex(p->opr.op[0])._int) ex(p->opr.op[1]); return rvTrue;
 				case DO:
-					do { ex(p->opr.op[0]); } while (ex(p->opr.op[1])._int); return rvTrue;
+					do { ex(p->opr.op[1]); } while (ex(p->opr.op[0])._int); return rvTrue;
 				case IF:	
 					if (ex(p->opr.op[0])._int)
 						ex(p->opr.op[1]);
