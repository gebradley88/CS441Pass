/*
 * TEAM Ethan Smith
 * Stage -- FINAL
 * Fall 2014 -- CS441 2014
 * December 15, 2014
 */

REPORT ON THE IMPLEMENTATION OF THE FINAL PROJECT FOR CS441 FALL 2014

1) OUR INTERESTING PROGRAM IS TITLED cubeRootApprox.pass

########## DEVELOPERS COMMENTS ON IMPLEMENTED FEATURES #######################
******************** C++-style for loop  ********************

-for loop was implemented similarly to other loops (symbol to .y file
implementation added to calc3a.c)

-for loop use extra the C++ syntax, e.g.,  for(i=0; i<3; i=i+1)

Limitations/bugs: no known issues


******************** Scopes/Multiple Blocks ********************
-Uses pushing and pulling symbol tables to keeps scope in perspective
-If variable name is visible in wide scope and then again
in smaller scope pass2i will throw warning about masking


Limitations/bugs: no known issues

*********** Constants ***********
-Constant value is set in line such as const int i = 2; or const float j = 2.1;
-Constant values may not be changed once they are declared
- As opposed to making a new type for each const <type> combination we decided to add a flag system to variables. This allows for us to ignore type and check if a symbol_entry is a variable, an undefined constant, or a defined constant.
We then simply flip the flag from undefined to defined whenever the constant is first given a value.
Limitations/bugs: [describe or say "no known issues"}

******************** Semantic analysis ********************
-Prevents user from changing value of const by throwing error
-Warns user if a float value is being truncated into an int
-Warns of redeclaration of variable
-Error on undeclared variable


******************** C++ Var Names ********************
-In order to implement variable names the group created a regEx
in calc3.l to find possible variable names which were allowed in C/C++.



Limitations/bugs: no known issues


******************* Symbol Table 1-level *****************
-This feature was implemented when the group applied
the patches provided by the instructor (Dr. Jaromczyk)


****************** C/C++ Style Comments ******************
-In order to recognize the comments the group first modified 
the calc3.l file to include a state machine
implementation of detecting the comments.
 The team set it up so that when // was found the compiler would
ignore all values until it found a newline. 

Multi line comments seemed to be bugged do to some strange regex used to check when they end. This was fixed and multi line comments now work as expected

Limitations/bugs: no known issues


**************** Recognition of Block Syntax ***************
-This feature was implemented when the group applied the patches provided 
by the instructor (Dr. Jaromczyk)

{ stmt_list } didn’t create a new scope which seemed strange, so I added some simple code so that a {} block would be a new scope exactly like begin … end. These are quite interchangeable now and I use begin … end as the stmt for a for loop in some of the tests to ensure these work equivalently
Limitations/bugs: no known issues

******************** Semantic Analysis ********************
-In order to implement this feature the team made it so that the modified
opr node would recognize if a type
was with a call to it.  For instance it would detect float
if there was a float x; which called it.  It would
also detect that there was no type if there was x=2;  
This allowed for the group to create conditions,
 which would be checked by opr, so that when a type 
was declared if a symbol of this name was already in existence
in the symbol Table then an error would be 
printed that the variable name had already been declared.(MULTIPLE DECLARATIONS)  
When it saw that there was not a type it knew to look for a symbol
in the symbol table and if it did not 
exist to create an error for an undefined variable name. (UNDECLARED VARIABLES)
- Large part of his feature was implemented when the team
 applied the patches provided by the instructor (Dr. Jaromczyk)

We didn’t have to do much with this other then extend the opr function for extra functionality and change how symbol entry’s are stored to allow for constants

Limitations/bugs: no known issues


******************** Do-While/Do-Until ********************
Implementation of both of these features were relatively the same steps.

We implemented the do until as a do while (!condition) so we didn’t have to create a new loop. This seems sufficient in testing.


Limitations/bugs: no known issues


###################### Limitations and bugs ######################
-The interpreter only does one pass through of the code, and
executes as it passes.  In effect, pas2i  may print things
or execute segments before encountering an error
(very typical of running scripting languages). 
An example of this limitation can be seen in the test "test-pi-undeclared.pass".

The type system needs a serious overhaul, I added a new type making three and it made type coercion much more complicated. So that could use some work.

-----------------------TEST CASES-------------------------------------
Test Cases and expected output can be found in the myTests/ and t/ directories.
A recorded testing session is
also saved in the tests/ directory as testSession

#################################################################